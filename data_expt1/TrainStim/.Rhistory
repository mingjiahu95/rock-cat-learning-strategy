x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val), fontsize = 14))))
return(annotated_img)
}
# Read the images
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
type <- "Basalt"
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
type <- "Diorite"
# Read the images
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
type <- "Gabbro"
# Read the images
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
type <- "Obsidian"
# Read the images
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
type <- "Pegmatite"
# Read the images
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
type <- "Peridotite"
# Read the images
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
type <- "Pumice"
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
img_list <- lapply(1:12, read_img)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
read_img <- function(cat = i,token = j) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[i]
j_rock <- unique(accu_data$token[accu_data$cat == rocktype])[j]
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token <- accu_data$Pr_corr[accu_data$cat == rocktype & accu_data$token == j_rock]
accu_cat_vec <- accu_data$Pr_corr[accu_data$cat == rocktype]
color_val <- (accu_token - min(accu_cat_vec))/(max(accu_cat_vec) - min(accu_cat_vec))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = round(accu_token,3),
x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val), fontsize = 14))))
return(annotated_img)
}
library(grDevices)
library(png)
library(grid)
library(gridExtra)
# Set the directory where the PNG files are stored
path <- "../experiment code/rocksall480/"
# Function to read the PNG images
accu_data <- read.csv(file = "Item Classification Accuracy_SC.csv") #change between conditions
# Define color palette
palette_func <- colorRamp(c("red","green"), space = "rgb")
get_color <- function(value){rgb_val <- palette_func(value)
rgb(rgb_val[1], rgb_val[2], rgb_val[3], maxColorValue = 255)}
############################
read_img <- function(cat = i,token = j) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[i]
j_rock <- unique(accu_data$token[accu_data$cat == rocktype])[j]
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token <- accu_data$Pr_corr[accu_data$cat == rocktype & accu_data$token == j_rock]
accu_cat_vec <- accu_data$Pr_corr[accu_data$cat == rocktype]
color_val <- (accu_token - min(accu_cat_vec))/(max(accu_cat_vec) - min(accu_cat_vec))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = round(accu_token,3),
x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val), fontsize = 14))))
return(annotated_img)
}
for i in 1:length(type_list){
for (i in 1:length(type_list)){
img_list <- lapply(1:12, read_img, cat = i)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
}
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
read_img <- function(cat = i,token = j) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[i]
j_rock <- unique(accu_data$token[accu_data$cat == rocktype])[j]
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token <- accu_data$Pr_corr[accu_data$cat == rocktype & accu_data$token == j_rock]
accu_cat_vec <- accu_data$Pr_corr[accu_data$cat == rocktype]
color_val <- (accu_token - min(accu_cat_vec))/(max(accu_cat_vec) - min(accu_cat_vec))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = round(accu_token,3),
x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val), fontsize = 14))))
return(annotated_img)
}
# Read the images
for (i in 1:length(type_list)){
img_list <- lapply(1:12, read_img, cat = i)
# Create a grid of images
grid.arrange(
grobs = img_list,
nrow = 4
)
}
library(data.table)
library(tidyverse)
library(gridExtra)
library(magrittr)
# ---- Load the Data ----
setwd("../data")
files = dir(pattern = ".txt")
data = do.call(bind_rows, lapply(files, read.table))
nrows = sapply(files, function(f) nrow(read.table(f)) )
setwd("../data analysis")
# ---- define the data types ----
colnames(data) = c("cond","subj","block","phase","trial","cat","token","resp","corr","rt_decision","rt_selection")
data$cond = factor(data$cond,labels = c("random","student_chosen"))#c("random","student_chosen","yoked")
data$subj = as.integer(data$subj)
data$block = as.integer(data$block)
data$phase = factor(data$phase,labels = c("train","test"))
data$trial = as.integer(data$trial)
data$cat = factor(data$cat,labels = c("Andesite", "Basalt", "Diorite", "Gabbro", "Obsidian", "Pegmatite", "Peridotite", "Pumice"))
data$resp = factor(data$resp,labels = c("Andesite", "Basalt", "Diorite", "Gabbro", "Obsidian", "Pegmatite", "Peridotite", "Pumice"))
data$corr = as.integer(data$corr)
#---------------------------------------------------------
# learning curves
learning_curve_df = data %>%
group_by(cond,subj,phase,block) %>%
summarize(Pr_corr_sub = mean(corr == 1)) %>%
ungroup() %>%
group_by(cond,phase,block) %>%
summarize(Pr_corr = mean(Pr_corr_sub),
SEM = sqrt(var(Pr_corr_sub)/length(Pr_corr_sub)),
N_subj = n_distinct(subj))
N_subj_R <- unique(learning_curve_df$N_subj[learning_curve_df$cond == "random"])
N_subj_SC <- unique(learning_curve_df$N_subj[learning_curve_df$cond == "student_chosen"])
p <- ggplot(data = learning_curve_df,
aes(y=Pr_corr, x=block)) +
geom_line(aes(linetype = cond),linewidth = .7) +
geom_point(aes(shape = cond),size = 3) +
geom_errorbar(aes(ymin = Pr_corr - SEM, ymax = Pr_corr + SEM), width = .1) +
scale_shape_manual(name = "Condition", values = c(1,2,3)) +
scale_linetype_manual(name = "Condition", values = c("solid","dashed","dotted")) + #only two values are used
xlab("Block") +
ylab ("Proportion Correct") +
ggtitle(paste0("N_subj_R = ",N_subj_R,", ","N_subj_SC = ", N_subj_SC)) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~phase) +
theme_bw(base_size = 15) +
theme(panel.grid.minor = element_blank())
ggsave(paste('learning curve',".jpg"),plot = p ,path = "../figure",width = 12, height = 6)
# subject_level accuracy distribution
accudist_train_df = data %>%
filter(phase == "train", block %in% c(7,8,9)) %>%
group_by(cond,subj) %>%
summarize(Pr_corr_sub = mean(corr == 1)) %>%
ungroup()
accudist_test_df = data %>%
filter(phase == "test", block %in% c(7,8,9)) %>%
group_by(cond,subj) %>%
summarize(Pr_corr_sub = mean(corr == 1)) %>%
ungroup()
facet_labels <- c("random" = paste0("random ","(N = ",N_subj_R, ")"),
"student_chosen" = paste0("student chosen ","(N = ",N_subj_SC, ")"))
p_train <- ggplot(data = accudist_train_df,
aes(x=Pr_corr_sub)) +
geom_histogram(color = "black",fill = 'white',binwidth = .05) +
stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.5,binwidth = .05) +
xlab("Classification Accuracy") +
ylab ("Number of Subjects") +
scale_x_continuous(breaks=seq(.25,1.00,.05),labels =seq(.25,1.00,.05)) +
facet_wrap(~cond, labeller = as_labeller(facet_labels)) +
theme_bw(base_size = 15) +
theme(panel.grid.minor = element_blank())
p_test <- ggplot(data = accudist_test_df,
aes(x=Pr_corr_sub)) +
geom_histogram(color = "black",fill = 'white',binwidth = .05) +
stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.5,binwidth = .05) +
xlab("Classification Accuracy") +
ylab ("Number of Subjects") +
scale_x_continuous(breaks=seq(.25,1.00,.05),labels =seq(.25,1.00,.05)) +
facet_wrap(~cond, labeller = as_labeller(facet_labels)) +
theme_bw(base_size = 15) +
theme(panel.grid.minor = element_blank())
ggsave(paste('accuracy distribution_training',".jpg"),plot = p_train ,path = "../figure",width = 16, height = 8)
ggsave(paste('accuracy distribution_test',".jpg"),plot = p_test ,path = "../figure",width = 16, height = 8)
source("C:/Users/super/Desktop/lab/LearnStrategy/data analysis/ind rock accuracy.R")
# Install and load necessary packages
library(grDevices)
library(png)
library(grid)
library(gridExtra)
# Set the directory where the PNG files are stored
path <- "../experiment code/rocksall480/"
# Function to read the PNG images
accu_data_R <- read.csv(file = "Item Classification Accuracy_R.csv") #change between conditions
accu_data_SC <- read.csv(file = "Item Classification Accuracy_SC.csv") #change between conditions
# Define color palette
palette_func <- colorRamp(c("red","green"), space = "rgb")
get_color <- function(value){rgb_val <- palette_func(value)
rgb(rgb_val[1], rgb_val[2], rgb_val[3], maxColorValue = 255)}
############################
read_img <- function(cat = i,token = j) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[i]
j_rock <- unique(accu_data$token[accu_data$cat == rocktype])[j]
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token <- accu_data$Pr_corr[accu_data$cat == rocktype & accu_data$token == j_rock]
accu_cat_vec <- accu_data$Pr_corr[accu_data$cat == rocktype]
color_val <- (accu_token - min(accu_cat_vec))/(max(accu_cat_vec) - min(accu_cat_vec))
text_R = paste("R cond:",round(accu_token_R,3))
text_SC = paste("SC cond:",round(accu_token_SC,3))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = text_R,
x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val), fontsize = 14)),
textGrob(label = text_SC,
x = 0.9,
y = 0.85,
gp = gpar(col = get_color(color_val), fontsize = 14))
))
return(annotated_img)
}
# Read the images
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
for (itype in 1:length(type_list)){
img_list <- lapply(1:12, read_img, cat = itype)
# Create a grid of images
p <- grid.arrange(
grobs = img_list,
nrow = 4
)
ggsave(paste0(type_list[itype],".png"), p, width = 15, height = 15)
}
lapply(1:12, read_img, cat = "Andesite")
read_img <- function(cat,token) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[cat]
j_rock <- unique(accu_data$token[accu_data$cat == rocktype])[token]
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token <- accu_data$Pr_corr[accu_data$cat == rocktype & accu_data$token == j_rock]
accu_cat_vec <- accu_data$Pr_corr[accu_data$cat == rocktype]
color_val <- (accu_token - min(accu_cat_vec))/(max(accu_cat_vec) - min(accu_cat_vec))
text_R = paste("R cond:",round(accu_token_R,3))
text_SC = paste("SC cond:",round(accu_token_SC,3))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = text_R,
x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val), fontsize = 14)),
textGrob(label = text_SC,
x = 0.9,
y = 0.85,
gp = gpar(col = get_color(color_val), fontsize = 14))
))
return(annotated_img)
}
# Read the images
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
for (itype in 1:length(type_list)){
img_list <- lapply(1:12, read_img, cat = itype)
# Create a grid of images
p <- grid.arrange(
grobs = img_list,
nrow = 4
)
ggsave(paste0(type_list[itype],".png"), p, width = 15, height = 15)
}
read_img <- function(cat,token,accu_data_R,accu_data_SC) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[cat]
j_rock <- unique(accu_data_R$token[accu_data$cat == rocktype])[token] # check if the values match that of SC file
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token_R <- with(accu_data_R,Pr_corr[cat == rocktype & token == j_rock])
accu_cat_vec_R <- with(accu_data_R,Pr_corr[cat == rocktype])
accu_token_SC <- with(accu_data_SC,Pr_corr[cat == rocktype & token == j_rock])
accu_cat_vec_SC <- with(accu_data_SC,Pr_corr[cat == rocktype])
color_val_R <- (accu_token_R - min(accu_cat_vec_R))/(max(accu_cat_vec_R) - min(accu_cat_vec_R))
color_val_SC <- (accu_token_SC - min(accu_cat_vec_SC))/(max(accu_cat_vec_SC) - min(accu_cat_vec_SC))
text_R = paste("R cond:",round(accu_token_R,3))
text_SC = paste("SC cond:",round(accu_token_SC,3))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = text_R,
x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val_R), fontsize = 14)),
textGrob(label = text_SC,
x = 0.9,
y = 0.85,
gp = gpar(col = get_color(color_val_SC), fontsize = 14))
))
return(annotated_img)
}
# Read the images
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
for (itype in 1:length(type_list)){
img_list <- lapply(1:12, read_img, cat = itype,accu_data_R = accu_data_R,accu_data_SC = accu_data_SC)
# Create a grid of images
p <- grid.arrange(
grobs = img_list,
nrow = 4
)
ggsave(paste0(type_list[itype],".png"), p, width = 15, height = 15)
}
read_img <- function(cat,token,accu_data_R,accu_data_SC) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[cat]
j_rock <- unique(accu_data_R$token[accu_data_R$cat == rocktype])[token] # check if the values match that of SC file
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token_R <- with(accu_data_R,Pr_corr[cat == rocktype & token == j_rock])
accu_cat_vec_R <- with(accu_data_R,Pr_corr[cat == rocktype])
accu_token_SC <- with(accu_data_SC,Pr_corr[cat == rocktype & token == j_rock])
accu_cat_vec_SC <- with(accu_data_SC,Pr_corr[cat == rocktype])
color_val_R <- (accu_token_R - min(accu_cat_vec_R))/(max(accu_cat_vec_R) - min(accu_cat_vec_R))
color_val_SC <- (accu_token_SC - min(accu_cat_vec_SC))/(max(accu_cat_vec_SC) - min(accu_cat_vec_SC))
text_R = paste("R cond:",round(accu_token_R,3))
text_SC = paste("SC cond:",round(accu_token_SC,3))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = text_R,
x = 0.9,
y = 0.95,
gp = gpar(col = get_color(color_val_R), fontsize = 14)),
textGrob(label = text_SC,
x = 0.9,
y = 0.85,
gp = gpar(col = get_color(color_val_SC), fontsize = 14))
))
return(annotated_img)
}
# Read the images
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
for (itype in 1:length(type_list)){
img_list <- lapply(1:12, read_img, cat = itype,accu_data_R = accu_data_R,accu_data_SC = accu_data_SC)
# Create a grid of images
p <- grid.arrange(
grobs = img_list,
nrow = 4
)
ggsave(paste0(type_list[itype],".png"), p, width = 15, height = 15)
}
library(ggplot2)
accu_token_R <- with(accu_data_R,Pr_corr[cat == rocktype & token == j_rock])
read_img <- function(cat,token,accu_data_R,accu_data_SC) {
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
rocktype <- type_list[cat]
j_rock <- unique(accu_data_R$token[accu_data_R$cat == rocktype])[token] # check if the values match that of SC file
j_char <- sprintf("%02d", j_rock)
filename <- paste0(path,"I_",rocktype,"_",j_char,".png")
img <- readPNG(filename)
img_grob <- rasterGrob(img, interpolate=TRUE)
# Add index and accuracy to the top of each image
accu_token_R <- with(accu_data_R,Pr_corr[cat == rocktype & token == j_rock])
accu_cat_vec_R <- with(accu_data_R,Pr_corr[cat == rocktype])
accu_token_SC <- with(accu_data_SC,Pr_corr[cat == rocktype & token == j_rock])
accu_cat_vec_SC <- with(accu_data_SC,Pr_corr[cat == rocktype])
color_val_R <- (accu_token_R - min(accu_cat_vec_R))/(max(accu_cat_vec_R) - min(accu_cat_vec_R))
color_val_SC <- (accu_token_SC - min(accu_cat_vec_SC))/(max(accu_cat_vec_SC) - min(accu_cat_vec_SC))
text_R = paste("R cond:",round(accu_token_R,3))
text_SC = paste("SC cond:",round(accu_token_SC,3))
annotated_img <- gTree(children=gList(img_grob,
textGrob(label = j_char,
x = 0.1,
y = 0.95,
gp = gpar(col = "black", fontsize = 14)),
textGrob(label = text_R,
x = 0.9,
y = 0.85,
gp = gpar(col = get_color(color_val_R), fontsize = 14)),
textGrob(label = text_SC,
x = 0.9,
y = 0.75,
gp = gpar(col = get_color(color_val_SC), fontsize = 14))
))
return(annotated_img)
}
# Read the images
type_list <- c("Andesite","Basalt","Diorite","Gabbro","Obsidian","Pegmatite","Peridotite","Pumice")
for (itype in 1:length(type_list)){
img_list <- lapply(1:12, read_img, cat = itype,accu_data_R = accu_data_R,accu_data_SC = accu_data_SC)
# Create a grid of images
p <- grid.arrange(
grobs = img_list,
nrow = 4
)
ggsave(paste0(type_list[itype],".png"), p, width = 15, height = 15)
}
library(data.table)
library(tidyverse)
library(gridExtra)
library(magrittr)
# ---- Load the Data ----
setwd("../data")
files = dir(pattern = ".txt")
data = do.call(bind_rows, lapply(files, read.table))
nrows = sapply(files, function(f) nrow(read.table(f)) )
setwd("../data analysis")
source("C:/Users/super/Desktop/lab/LearnStrategy/data analysis/preliminary analyses.R")
library(data.table)
library(tidyverse)
library(gridExtra)
library(magrittr)
# ---- Load the Data ----
setwd("../data")
library(data.table)
library(tidyverse)
library(gridExtra)
library(magrittr)
# ---- Load the Data ----
setwd("../data")
