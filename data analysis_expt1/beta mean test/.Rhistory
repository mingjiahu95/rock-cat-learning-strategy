# Clean up
graphics.off()
# Clean up
graphics.off()
rm(list=ls())
set.seed(47405)
# Libraries
library(tidyverse)
library(gamlss)
library(runjags)
library(gridExtra)
# Source DBDA2E Helpers from OSF Repository
source("https://osf.io/uahfc/download")
# Get Mingjia's data
df <- read.csv("participant_performance.csv")
## Beta-binomial, Bayesian-style
# Prep for JAGS
y <- as.integer(df$y)
n <- as.integer(df$N)
x <- as.integer(df$cond_factor) # 1 is random; 2 is student-chosen
Ntotal <- nrow(df)
# Values (p.alpha & p.beta) for the prior for the mode
# mean.pct <- mean(y/48) # Across all groups; divide y by the number of items
# sd <- 0.1
# p.alpha <- ((1 - mean.pct) / sd ^ 2 - 1 / mean.pct) * mean.pct ^ 2
# p.beta <- p.alpha * (1 / mean.pct - 1)
p.alpha <- 1
p.beta <- 1
# Package for JAGS
dataList = list(
y = y ,
n = n ,
x = x ,
p.alpha = p.alpha ,
p.beta = p.beta ,
Ntotal = Ntotal
)
model = "
model {
for( i in 1:Ntotal ){
y[i]     ~  dbinom(p[i], n[i])
p[i]     ~  dbeta(alpha[i],beta[i])
alpha[i] <- omega[x[i]]*(kappa[x[i]]-2)+1
beta[i]  <- (1-omega[x[i]])*(kappa[x[i]]-2)+1
}
for(g in 1:2){
omega[g]       ~  dbeta(p.alpha,p.beta)
kappa[g]       <- kappa.prime[g] + 2
kappa.prime[g] ~  dgamma(0.01, 0.01) # mean = 1, sd = 10
}
}"
rerun <- TRUE
if (rerun) { # If we are going to rerun the chains
parameters <- c('omega','kappa')
tic <- Sys.time()
jags.result <- run.jags(model,
data=dataList,
monitor = parameters,
n.chains = 3,
adapt  = 5000,
burnin = 5000,
sample = 30000,
method='parallel')
toc <- Sys.time()
toc-tic  # Time difference of 1.328313 mins
coda.samples <- as.mcmc.list( jags.result )
save(jags.result, coda.samples, file="codaSamples.Rdata")
} else { # Go get the jags output and coda samples
load(file="codaSamples.Rdata")
}
if (rerun) { # If we are going to rerun the chains
parameters <- c('omega','kappa')
tic <- Sys.time()
jags.result <- run.jags(model,
data=dataList,
monitor = parameters,
n.chains = 3,
adapt  = 5000,
burnin = 5000,
sample = 30000,
method='parallel')
toc <- Sys.time()
toc-tic  # Time difference of 1.328313 mins
coda.samples <- as.mcmc.list( jags.result )
save(jags.result, coda.samples, file="codaSamples.Rdata")
} else { # Go get the jags output and coda samples
load(file="codaSamples.Rdata")
}
