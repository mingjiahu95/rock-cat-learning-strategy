#   width = 1, bw = 2/48, scale = "count",
#   trim = T) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "count",
trim = T)
}) +
labs(x = "Condition",y = "Proportion Correct") +
facet_wrap(~ cycle, nrow = 2) +
theme_pubr() +
guides(fill = "none")
ggsave("posterior predictions violin.png", plot = p, path = "figure/model prediction", width = 18, height = 12)
graphics.off()
rm(list=ls())
set.seed(47405)
# Libraries
# library(pkgbuild)
library(tidyverse)
library(brms)
library(rlang)
library(gghalves)
library(ggpubr)
library(gridExtra)
library(cmdstanr)
# Source DBDA2E Helpers from OSF Repository
source("https://osf.io/uahfc/download")
source("../../utils/beta-binom.R")
# Load data
data <- readRDS("../data_mod.RDS") #change data set
epsilon <- 1e-6
df <- data %>%
filter(trialType %in% c("class_response", "cat_selection"), phase == "test") %>%
select(subjID, condition, stimID, cycle, cat, resp, corr) %>%
mutate(cond = factor(condition, labels = c("GEE","GEA","GCP","CCP")),
condition = NULL,
stimID = as.integer(stimID),
cycle_fct = as.factor(cycle),
cat = as.factor(cat),
resp = as.factor(resp),
corr = as.logical(corr)
) %>%
group_by(cond, subjID, cycle, cat) %>%
summarize(N_corr = sum(corr),
N_trials = length(corr),
cycle_fct = unique(cycle_fct))
Ntotal <- nrow(df)
Ncond <- n_distinct(df$cond)
Ncat <- n_distinct(df$cat)
load(file="brms_fit_learnRate_full.Rdata") #change fit objects here
fit <- fit_full
#expose pmf and rng functions defined by RSTAN
expose_functions(fit, vectorize = TRUE) #expose pmf and rng functions defined by RSTAN
summary(fit)
conds_tbl <- df %>%
distinct(cond, subjID, cycle, cycle_fct, cat, N_trials)
posterior_draws_df <- posterior_predict(fit, newdata = conds_tbl, ndraws = 30) %>%
t() %>%
as_tibble() %>%
setNames(paste0("pred_draw", 1:30)) %>%
bind_cols(conds_tbl)
df_obs_pred <- posterior_draws_df %>%
inner_join(df, by = c('cond', 'subjID', 'cycle', 'cycle_fct', 'cat', 'N_trials')) %>%
group_by(cond, subjID, cycle, cycle_fct) %>%
summarize(N_corr = sum(N_corr),
across(starts_with("pred_draw"), sum, .names = 'N_corr_{.col}'),
N_trials = sum(N_trials),
across(starts_with("pred_draw"), ~sum(.x)/N_trials, .names = 'Pr_corr_{.col}'),
Pr_corr = N_corr/N_trials) %>%
rowwise() %>%
mutate(N_corr_pred_median = median(c_across(starts_with("N_corr_pred_draw"))),
Pr_corr_pred_median = N_corr_pred_median/N_trials)
pred_col_names <- grep("^Pr_corr_pred_draw", colnames(df_obs_pred), value = TRUE)
p <- ggplot(df_obs_pred, aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Proportion Correct") +
facet_wrap(~ cycle, nrow = 2) +
theme_pubr() +
guides(fill = "none")
ggsave("posterior predictions violin.png", plot = p, path = "figure/model prediction", width = 18, height = 12)
setwd("C:/Users/super/Desktop/lab/LearnStrategy/data analysis_expt3/statistics")
# Clean up
graphics.off()
rm(list=ls())
set.seed(47405)
# Libraries
# library(pkgbuild)
library(tidyverse)
library(brms)
library(rlang)
library(gghalves)
library(ggpubr)
library(gridExtra)
library(cmdstanr)
# Source DBDA2E Helpers from OSF Repository
source("https://osf.io/uahfc/download")
source("../../utils/beta-binom.R")
# Load data
data <- readRDS("../data_mod.RDS") #change data set
epsilon <- 1e-6
df <- data %>%
filter(trialType %in% c("class_response", "cat_selection"), phase == "test") %>%
select(subjID, condition, stimID, cycle, cat, resp, corr) %>%
mutate(cond = factor(condition, labels = c("GEE","GEA","GCP","CCP")),
condition = NULL,
stimID = as.integer(stimID),
cycle_fct = as.factor(cycle),
cat = as.factor(cat),
resp = as.factor(resp),
corr = as.logical(corr)
) %>%
group_by(cond, subjID, cycle, cat) %>%
summarize(N_corr = sum(corr),
N_trials = length(corr),
cycle_fct = unique(cycle_fct))
Ntotal <- nrow(df)
Ncond <- n_distinct(df$cond)
Ncat <- n_distinct(df$cat)
load(file="brms_fit_learnRate_full.Rdata") #change fit objects here
fit <- fit_full
#expose pmf and rng functions defined by RSTAN
expose_functions(fit, vectorize = TRUE) #expose pmf and rng functions defined by RSTAN
summary(fit)
posterior_draws_df <- posterior_predict(fit, ndraws = 30) %>%
t() %>%
as_tibble() %>%
setNames(paste0("pred_draw", 1:30))
df_obs_pred <- posterior_draws_df %>%
bind_cols(fit$data) %>%
group_by(cond, subjID, cycle, cycle_fct) %>%
summarize(N_corr = sum(N_corr),
across(starts_with("pred_draw"), sum, .names = 'N_corr_{.col}'),
N_trials = sum(N_trials),
across(starts_with("pred_draw"), ~sum(.x)/N_trials, .names = 'Pr_corr_{.col}'),
Pr_corr = N_corr/N_trials) %>%
rowwise() %>%
mutate(N_corr_pred_median = median(c_across(starts_with("N_corr_pred_draw"))),
Pr_corr_pred_median = N_corr_pred_median/N_trials)
pred_col_names <- grep("^Pr_corr_pred_draw", colnames(df_obs_pred), value = TRUE)
p <- ggplot(df_obs_pred, aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Percent Correct") +
facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 25) +
guides(fill = "none")
ggplot(df_obs_pred, aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Percent Correct") +
facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 25) +
guides(fill = "none")
p <- ggplot(df_obs_pred, aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Percent Correct") +
facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 20) +
guides(fill = "none")
ggsave("posterior predictions violin.png", plot = p, path = "figure/model prediction", width = 18, height = 12)
p <- ggplot(df_obs_pred, aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Percent Correct") +
facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 25) +
guides(fill = "none")
ggsave("posterior predictions violin.png", plot = p, path = "figure/model prediction", width = 18, height = 12)
# Clean up
graphics.off()
rm(list=ls())
set.seed(47405)
# Libraries
# library(pkgbuild)
library(tidyverse)
library(brms)
library(rlang)
library(gghalves)
library(ggpubr)
library(gridExtra)
library(cmdstanr)
# Source DBDA2E Helpers from OSF Repository
source("https://osf.io/uahfc/download")
source("../../utils/beta-binom.R")
# Load data
data <- readRDS("../data_mod.RDS") #change data set
epsilon <- 1e-6
df <- data %>%
filter(trialType %in% c("class_response", "cat_selection"), phase == "test") %>%
select(subjID, condition, stimID, cycle, cat, resp, corr) %>%
mutate(cond = factor(condition, labels = c("GEE","GEA","GCP","CCP")),
condition = NULL,
stimID = as.integer(stimID),
cycle_fct = as.factor(cycle),
cat = as.factor(cat),
resp = as.factor(resp),
corr = as.logical(corr)
) %>%
group_by(cond, subjID, cycle, cat) %>%
summarize(N_corr = sum(corr),
N_trials = length(corr),
cycle_fct = unique(cycle_fct))
Ntotal <- nrow(df)
Ncond <- n_distinct(df$cond)
Ncat <- n_distinct(df$cat)
load(file="brms_fit_learnRate_full.Rdata") #change fit objects here
fit <- fit_full
#expose pmf and rng functions defined by RSTAN
expose_functions(fit, vectorize = TRUE) #expose pmf and rng functions defined by RSTAN
summary(fit)
posterior_draws_df <- posterior_predict(fit, ndraws = 30) %>%
t() %>%
as_tibble() %>%
setNames(paste0("pred_draw", 1:30))
df_obs_pred <- posterior_draws_df %>%
bind_cols(fit$data) %>%
group_by(cond, subjID, cycle, cycle_fct) %>%
summarize(N_corr = sum(N_corr),
across(starts_with("pred_draw"), sum, .names = 'N_corr_{.col}'),
N_trials = sum(N_trials),
across(starts_with("pred_draw"), ~sum(.x)/N_trials, .names = 'Pr_corr_{.col}'),
Pr_corr = N_corr/N_trials) %>%
rowwise() %>%
mutate(N_corr_pred_median = median(c_across(starts_with("N_corr_pred_draw"))),
Pr_corr_pred_median = N_corr_pred_median/N_trials)
pred_col_names <- grep("^Pr_corr_pred_draw", colnames(df_obs_pred), value = TRUE)
p <- ggplot(filter(df_obs_pred, cycle == 4),
aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Final Test Accuracy") +
scale_x_discrete(labels = cond_labels) +
# facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 30) +
guides(fill = "none")
cond_labels <- c("GEE" = "Given Example\nEven", "GEA" = "Given Example\nAdapted",
"GCP" = "Given Category\nPaired", "CCP" = "Choose Category\nPaired")
p <- ggplot(filter(df_obs_pred, cycle == 4),
aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Final Test Accuracy") +
scale_x_discrete(labels = cond_labels) +
# facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 30) +
guides(fill = "none")
ggsave("posterior predictions violin.png", plot = p, path = "figure/model prediction", width = 14, height = 12)
p <- ggplot(filter(df_obs_pred, cycle == 4),
aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Final Test Accuracy") +
scale_x_discrete(labels = cond_labels) +
# facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 30) +
theme(axis.text.x = element_text(size = 25))
guides(fill = "none")
ggsave("posterior predictions violin.png", plot = p, path = "figure/model prediction", width = 14, height = 12)
p <- ggplot(filter(df_obs_pred, cycle == 4),
aes(x = cond, fill = cond)) +
geom_half_violin(
aes(y = Pr_corr),
side = "l", draw_quantiles = c(0.25, 0.5, 0.75),
color = "black", alpha = 1,
bw = 1/48, width = 1, scale = "area",
trim = T
) +
lapply(pred_col_names,
function (col_name){
geom_half_violin(
aes(y = !!sym(col_name)),
side = "r",
color = "lightgrey", alpha = 0.02,
width = 1, bw = 3/48, scale = "area",
trim = T)
}) +
labs(x = "Condition",y = "Final Test Accuracy") +
scale_x_discrete(labels = cond_labels) +
# facet_wrap(~ cycle, nrow = 2) +
theme_pubr(base_size = 30) +
theme(axis.text.x = element_text(size = 25)) +
guides(fill = "none")
ggsave("posterior predictions violin.png", plot = p, path = "figure/model prediction", width = 14, height = 12)
graphics.off()
rm(list=ls())
set.seed(47405)
# Libraries
# library(pkgbuild)
library(tidyverse)
library(brms)
library(gridExtra)
library(ggpubr)
library(ggridges)
library(parallel)
source("../../utils/beta-binom.R")
# Load experimental data
data <- readRDS("../data_full.RDS") #change data set
epsilon <- 1e-6
df <- data %>%
filter(trialType %in% c("class_response", "cat_selection"), phase == "test") %>%
select(subjID, condition, stimID, cycle, cat, resp, corr) %>%
mutate(cond = factor(condition, labels = c("GEE","GEA","GCP","CCP")),
condition = NULL,
stimID = as.integer(stimID),
cycle_fct = as.factor(cycle),
cat = as.factor(cat),
resp = as.factor(resp),
corr = as.logical(corr)
) %>%
group_by(cond, subjID, cycle, cat) %>%
summarize(N_corr = sum(corr),
N_trials = length(corr),
cycle_fct = unique(cycle_fct))
# Load brms fit object
load(file="brms_fit_learnRate_full.Rdata")
fit = fit_full
expose_functions(fit, vectorize = TRUE)
posterior_draw_df <- t(posterior_predict(fit)) %>%
as_tibble() %>%
setNames(paste0("sample", 1:ncol(.)))
save(posterior_draw_df, file = "posterior_draw_df.Rdata")
load("posterior_draw_df.Rdata")
posterior_samples_quartile_contrast <- fit$data %>%
bind_cols(posterior_draw_df) %>%
pivot_longer(cols = starts_with("sample"), names_prefix = "sample",
names_to = "sample", values_to = "N_corr_pred") %>%
mutate(sample = as.integer(sample)) %>%
filter(cycle == 4) %>% #focus on final test performance
group_by(cond,subjID,sample) %>%
summarize(PrCorr_obs = sum(N_corr)/sum(N_trials),
PrCorr_pred = sum(N_corr_pred)/sum(N_trials))%>%
group_by(cond,cycle,sample) %>%
reframe(
quartile = c("lq", "m", "uq"),
Pr_corr_pred = quantile(PrCorr_pred, probs = c(0.25, 0.5, 0.75)),
Pr_corr_obs = quantile(PrCorr_obs, probs = c(0.25, 0.5, 0.75))
)  %>%
group_by(cycle,sample,quartile) %>%
summarize(Pr_corr_pred_GEAvsGEE = Pr_corr_pred[cond == "GEA"] - Pr_corr_pred[cond == "GEE"],
Pr_corr_obs_GEAvsGEE = Pr_corr_obs[cond == "GEA"] - Pr_corr_obs[cond == "GEE"],
Pr_corr_pred_GCPvsGEE = Pr_corr_pred[cond == "GCP"] - Pr_corr_pred[cond == "GEE"],
Pr_corr_obs_GCPvsGEE = Pr_corr_obs[cond == "GCP"] - Pr_corr_obs[cond == "GEE"],
Pr_corr_pred_CCPvsGEE= Pr_corr_pred[cond == "CCP"] - Pr_corr_pred[cond == "GEE"],
Pr_corr_obs_CCPvsGEE = Pr_corr_obs[cond == "CCP"] - Pr_corr_obs[cond == "GEE"]) %>%
ungroup() %>%
pivot_longer(cols = starts_with("Pr_corr"),
names_to = c(".value", "contrast"),
names_pattern = "(Pr_corr_pred|Pr_corr_obs)_(.*)") %>%
group_by(contrast, quartile) %>%
reframe(
bound_type = c("lower","median","upper"),
Pr_corr_pred_cutoff =  quantile(Pr_corr_pred, c(0.025, 0.5, 0.975))
) %>%
ungroup()
View(posterior_draw_df)
posterior_samples_quartile_contrast <- fit$data %>%
bind_cols(posterior_draw_df) %>%
pivot_longer(cols = starts_with("sample"), names_prefix = "sample",
names_to = "sample", values_to = "N_corr_pred") %>%
mutate(sample = as.integer(sample)) %>%
filter(cycle == 4)
View(posterior_samples_quartile_contrast)
posterior_samples_quartile_contrast <- fit$data %>%
bind_cols(posterior_draw_df) %>%
pivot_longer(cols = starts_with("sample"), names_prefix = "sample",
names_to = "sample", values_to = "N_corr_pred") %>%
mutate(sample = as.integer(sample)) %>%
filter(cycle == 4) %>% #focus on final test performance
group_by(cond,subjID,sample) %>%
summarize(PrCorr_obs = sum(N_corr)/sum(N_trials),
PrCorr_pred = sum(N_corr_pred)/sum(N_trials))%>%
group_by(cond,sample) %>%
reframe(
quartile = c("lq", "m", "uq"),
Pr_corr_pred = quantile(PrCorr_pred, probs = c(0.25, 0.5, 0.75)),
Pr_corr_obs = quantile(PrCorr_obs, probs = c(0.25, 0.5, 0.75))
)  %>%
group_by(sample,quartile) %>%
summarize(Pr_corr_pred_GEAvsGEE = Pr_corr_pred[cond == "GEA"] - Pr_corr_pred[cond == "GEE"],
Pr_corr_obs_GEAvsGEE = Pr_corr_obs[cond == "GEA"] - Pr_corr_obs[cond == "GEE"],
Pr_corr_pred_GCPvsGEE = Pr_corr_pred[cond == "GCP"] - Pr_corr_pred[cond == "GEE"],
Pr_corr_obs_GCPvsGEE = Pr_corr_obs[cond == "GCP"] - Pr_corr_obs[cond == "GEE"],
Pr_corr_pred_CCPvsGEE= Pr_corr_pred[cond == "CCP"] - Pr_corr_pred[cond == "GEE"],
Pr_corr_obs_CCPvsGEE = Pr_corr_obs[cond == "CCP"] - Pr_corr_obs[cond == "GEE"]) %>%
ungroup() %>%
pivot_longer(cols = starts_with("Pr_corr"),
names_to = c(".value", "contrast"),
names_pattern = "(Pr_corr_pred|Pr_corr_obs)_(.*)") %>%
group_by(contrast, quartile) %>%
reframe(
bound_type = c("lower","median","upper"),
Pr_corr_pred_cutoff =  quantile(Pr_corr_pred, c(0.025, 0.5, 0.975))
) %>%
ungroup()
View(posterior_samples_quartile_contrast)
