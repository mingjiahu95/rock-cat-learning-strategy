plot_name_idx <- (x1_i - 1)*2 + x2_i
plot_order_idx <- (x2_i - 1)*2 + x1_i #reverse the order of x1_i and x2_i to change subplot order
# print(c(x_i,x1_i,x2_i))
p_list[[plot_order_idx]] <-  filter(df, `E/N vs. A` == x1_var_levels[x1_i], `G vs. C` == x2_var_levels[x2_i]) %>%
ggplot(aes(x=Pr_corr)) +
stat_bin(aes(y=after_stat(density)),bins=49,fill= "#BEBEBE") +
#scale_x_continuous(breaks=seq(0,1,(1/16)),labels = seq(0,48,3), limits = c(0,1)) +
scale_x_continuous(breaks=seq(x_cutoff/48,1,(1/48)),labels = seq(x_cutoff,48), limits = c(x_cutoff/48,1)) +
scale_y_continuous(expand = c(0,0)) +
mapply(function(a,b) {
stat_function(fun = dbeta, args = list(a,b),colour="black",alpha = 0.3)
},
a=sample[[par_name$a]],b=sample[[par_name$b]]) +
xlab("Number of Correct Responses over Blocks 7-9") + ylab("Density") +
ggtitle(paste0(x_var_names[plot_name_idx], "\n", "N_subj = ", N_subj$n_subj[plot_name_idx])) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.text.x = element_text(angle = 315, vjust = -0.5),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5))
}
}
grid.arrange(grobs = p_list, nrow=2)
p <- arrangeGrob(grobs = p_list, nrow=2)
ggsave("test accuracy distribution.png", p, path = "figure", scale = 3)
ggsave("test accuracy distribution.png", p, path = "figure", scale = 2)
ggsave("test accuracy distribution.png", p, path = "figure")
x_cutoff <- 2
for (x1_i in 1:2) {
for (x2_i in 1:2) {
par_name = c()
par_name$a <- paste0("a",x1_i,x2_i)
par_name$b <- paste0("b",x1_i,x2_i)
plot_name_idx <- (x1_i - 1)*2 + x2_i
plot_order_idx <- (x2_i - 1)*2 + x1_i #reverse the order of x1_i and x2_i to change subplot order
# print(c(x_i,x1_i,x2_i))
p_list[[plot_order_idx]] <-  filter(df, `E/N vs. A` == x1_var_levels[x1_i], `G vs. C` == x2_var_levels[x2_i]) %>%
ggplot(aes(x=Pr_corr)) +
stat_bin(aes(y=after_stat(density)),bins=49,fill= "#BEBEBE") +
scale_x_continuous(breaks=seq(0,1,(1/16)),labels = seq(0,48,3), limits = c(0,1)) +
# scale_x_continuous(breaks=seq(x_cutoff/48,1,(1/48)),labels = seq(x_cutoff,48), limits = c(x_cutoff/48,1)) +
scale_y_continuous(expand = c(0,0)) +
mapply(function(a,b) {
stat_function(fun = dbeta, args = list(a,b),colour="black",alpha = 0.3)
},
a=sample[[par_name$a]],b=sample[[par_name$b]]) +
xlab("Number of Correct Responses over Blocks 7-9") + ylab("Density") +
ggtitle(paste0(x_var_names[plot_name_idx], "\n", "N_subj = ", N_subj$n_subj[plot_name_idx])) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.text.x = element_text(angle = 315, vjust = -0.5),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5))
}
}
x_cutoff <- 0
for (x1_i in 1:2) {
for (x2_i in 1:2) {
par_name = c()
par_name$a <- paste0("a",x1_i,x2_i)
par_name$b <- paste0("b",x1_i,x2_i)
plot_name_idx <- (x1_i - 1)*2 + x2_i
plot_order_idx <- (x2_i - 1)*2 + x1_i #reverse the order of x1_i and x2_i to change subplot order
# print(c(x_i,x1_i,x2_i))
p_list[[plot_order_idx]] <-  filter(df, `E/N vs. A` == x1_var_levels[x1_i], `G vs. C` == x2_var_levels[x2_i]) %>%
ggplot(aes(x=Pr_corr)) +
stat_bin(aes(y=after_stat(density)),bins=49,fill= "#BEBEBE") +
scale_x_continuous(breaks=seq(0,1,(1/16)),labels = seq(0,48,3), limits = c(0,1)) +
# scale_x_continuous(breaks=seq(x_cutoff/48,1,(1/48)),labels = seq(x_cutoff,48), limits = c(x_cutoff/48,1)) +
scale_y_continuous(expand = c(0,0)) +
mapply(function(a,b) {
stat_function(fun = dbeta, args = list(a,b),colour="black",alpha = 0.3)
},
a=sample[[par_name$a]],b=sample[[par_name$b]]) +
ylab("Density") +
ggtitle(paste0(x_var_names[plot_name_idx], "\n", "N_subj = ", N_subj$n_subj[plot_name_idx])) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.text.x = element_text(angle = 315, vjust = -0.5),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5))
}
}
p <- arrangeGrob(grobs = p_list, nrow=2, bottom = "Number of Correct Responses over Blocks 7-9")
ggsave("test accuracy distribution.png", p, path = "figure")
p <- grid.arrange(grobs = p_list, nrow=2, bottom = "Number of Correct Responses over Blocks 7-9")
ggsave("test accuracy distribution.png", p, path = "figure")
p <- grid.arrange(grobs = p_list, nrow=2, bottom = "Number of Correct Responses over Blocks 7-9")
ggsave("test accuracy distribution.png", p, path = "figure")
x_cutoff <- 0
for (x1_i in 1:2) {
for (x2_i in 1:2) {
par_name = c()
par_name$a <- paste0("a",x1_i,x2_i)
par_name$b <- paste0("b",x1_i,x2_i)
plot_name_idx <- (x1_i - 1)*2 + x2_i
plot_order_idx <- (x2_i - 1)*2 + x1_i #reverse the order of x1_i and x2_i to change subplot order
# print(c(x_i,x1_i,x2_i))
p_list[[plot_order_idx]] <-  filter(df, `E/N vs. A` == x1_var_levels[x1_i], `G vs. C` == x2_var_levels[x2_i]) %>%
ggplot(aes(x=Pr_corr)) +
stat_bin(aes(y=after_stat(density)),bins=49,fill= "#BEBEBE") +
scale_x_continuous(breaks=seq(0,1,(1/24)),labels = seq(0,48,2), limits = c(0,1)) +
# scale_x_continuous(breaks=seq(x_cutoff/48,1,(1/48)),labels = seq(x_cutoff,48), limits = c(x_cutoff/48,1)) +
scale_y_continuous(expand = c(0,0)) +
mapply(function(a,b) {
stat_function(fun = dbeta, args = list(a,b),colour="black",alpha = 0.3)
},
a=sample[[par_name$a]],b=sample[[par_name$b]]) +
xlab("") +
ylab("Density") +
ggtitle(paste0(x_var_names[plot_name_idx], "\n", "N_subj = ", N_subj$n_subj[plot_name_idx])) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.text.x = element_text(angle = 315, vjust = -0.5),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5))
}
}
p <- grid.arrange(grobs = p_list, nrow=2, bottom = "Number of Correct Responses over Blocks 7-9")
ggsave("test accuracy distribution.png", p, path = "figure")
ggsave("test accuracy distribution.png", p, path = "figure", width = 10, height = 10)
# Clean up
graphics.off()
rm(list=ls())
set.seed(47405)
# Libraries
library(tidyverse)
library(gamlss)
library(runjags)
library(gridExtra)
# Source DBDA2E Helpers from OSF Repository
# source("DBDA2E-utilities.R")
source("https://osf.io/uahfc/download")
# Get Mingjia's data
df <- readRDS("../prolific data.RDS") %>%
filter(phase == "test", block %in% 7:9) %>%
mutate(`G vs. C` = if_else(grepl("TC",cond),"G","C"),
`E/N vs. A` = if_else(grepl("N",cond),"E/N","A"),
`G vs. C` = factor(`G vs. C`,levels = c("G","C")),
`E/N vs. A` = factor(`E/N vs. A`,levels = c("E/N","A"))
)%>%
group_by(`G vs. C`,`E/N vs. A`,subj) %>%
summarize(N_trials = n(),
N_corr = sum(corr == 1),
Pr_corr = N_corr/N_trials) %>%
group_by(`G vs. C`,`E/N vs. A`) %>%
filter(percent_rank(Pr_corr) > .15) %>%
# filter(Pr_corr > quantile(Pr_corr, 0.25, type = 4) - 1.5*IQR(Pr_corr, type = 4)) %>%
ungroup()
# Prep for JAGS
y <- as.integer(df$N_corr)
n <- as.integer(df$N_trials)
x1 <- as.integer(df$`E/N vs. A`) # 1 is E/N; 2 is A
x2 <- as.integer(df$`G vs. C`) # 1 is G; 2 is C
idx <- (x1-1)*2 + x2
Ntotal <- nrow(df)
# Values (p.alpha & p.beta) for the prior for the mode
mean.pct <- mean(y/n) # Across all groups; divide y by the number of items
sd <- 0.1
p.alpha <- ((1 - mean.pct) / sd ^ 2 - 1 / mean.pct) * mean.pct ^ 2
p.beta <- p.alpha * (1 / mean.pct - 1)
p.alpha <- 1
p.beta <- 1
# Package for JAGS
dataList = list(
y = y ,
n = n ,
p = y/n ,
x1 = x1 ,
x2 = x2 ,
idx = idx ,
p.alpha = p.alpha ,
p.beta = p.beta ,
Ntotal = Ntotal
)
model = "
model {
for(i in 1:Ntotal) {
y[i] ~ dbinom(p[i],n[i])
p[i] ~ dbeta(alpha[i],beta[i])
alpha[i] <- omega[idx[i]]*(kappa[idx[i]]-2)+1
beta[i]  <- (1-omega[idx[i]])*(kappa[idx[i]]-2)+1
}
for(g in 1:4){
omega[g]       ~  dbeta(p.alpha,p.beta)
kappa[g]       <- kappa.prime[g] + 2
kappa.prime[g] ~  dgamma(0.01, 0.01) # mean = 1, sd = 10
}
}"
rerun <- TRUE
if (rerun) { # If we are going to rerun the chains
parameters <- c('omega','kappa')
tic <- Sys.time()
jags.result <- run.jags(model,
data=dataList,
monitor = parameters,
n.chains = 3,
adapt  = 5000,
burnin = 5000,
sample = 10000,#30000
method='parallel')
toc <- Sys.time()
toc-tic  # Time difference of 1.328313 mins
coda.samples <- as.mcmc.list( jags.result )
save(jags.result, coda.samples, file="codaSamples.Rdata")
} else { # Go get the jags output and coda samples
load(file="codaSamples.Rdata")
}
rerun <- TRUE
if (rerun) { # If we are going to rerun the chains
parameters <- c('omega','kappa')
tic <- Sys.time()
jags.result <- run.jags(model,
data=dataList,
monitor = parameters,
n.chains = 3,
adapt  = 5000,
burnin = 5000,
sample = 20000,#30000
method='parallel')
toc <- Sys.time()
toc-tic  # Time difference of 1.328313 mins
coda.samples <- as.mcmc.list( jags.result )
save(jags.result, coda.samples, file="codaSamples.Rdata")
} else { # Go get the jags output and coda samples
load(file="codaSamples.Rdata")
}
# Diagnostics
parNames <- c("omega[1]","omega[2]","omega[3]","omega[4]",
"kappa[1]","kappa[2]","omega[3]","omega[4]")
for ( parName in parNames) {
diagMCMC( codaObject=coda.samples , parName=parName)
}
# Switch into matrix form for analysis
mcmcMat = as.matrix(coda.samples,chains=TRUE)
# Plot the data & estimates
# Randomly sample 25 omegas and kappas
sample <- mcmcMat[sample(nrow(mcmcMat),50),1:9]
colnames(sample) <- c('chains','omega11','omega12','omega21','omega22',
'kappa11','kappa12','kappa21','kappa22')
sample <- as.data.frame(sample)
# Change from omega & kappa into alpha and beta
sample <- sample %>%
mutate(a11 = omega11*(kappa11-2)+1,
b11 = (1.0-omega11)*(kappa11-2)+1,
a12 = omega12*(kappa12-2)+1,
b12 = (1.0-omega12)*(kappa12-2)+1,
a21 = omega21*(kappa21-2)+1,
b21 = (1.0-omega21)*(kappa21-2)+1,
a22 = omega22*(kappa22-2)+1,
b22 = (1.0-omega22)*(kappa22-2)+1
)
# Make the plot
p_list <- list()
x1_var_levels <- levels(df$`E/N vs. A`)
x2_var_levels <- levels(df$`G vs. C`)
x1_var_names <- c("No Algorithm", "With Algorithm")
x2_var_names <- c("Given", "Chosen")
var_names_comb <- expand.grid(x1_var_names, x2_var_names)
x_var_names <- paste(var_names_comb$Var1, var_names_comb$Var2, sep = ": ")
N_subj <- group_by(df, `E/N vs. A`, `G vs. C`) %>%
summarize(n_subj = n_distinct(subj))
x_cutoff <- 0
for (x1_i in 1:2) {
for (x2_i in 1:2) {
par_name = c()
par_name$a <- paste0("a",x1_i,x2_i)
par_name$b <- paste0("b",x1_i,x2_i)
plot_name_idx <- (x1_i - 1)*2 + x2_i
plot_order_idx <- (x2_i - 1)*2 + x1_i #reverse the order of x1_i and x2_i to change subplot order
# print(c(x_i,x1_i,x2_i))
p_list[[plot_order_idx]] <-  filter(df, `E/N vs. A` == x1_var_levels[x1_i], `G vs. C` == x2_var_levels[x2_i]) %>%
ggplot(aes(x=Pr_corr)) +
stat_bin(aes(y=after_stat(density)),bins=49,fill= "#BEBEBE") +
scale_x_continuous(breaks=seq(0,1,(1/24)),labels = seq(0,48,2), limits = c(0,1)) +
# scale_x_continuous(breaks=seq(x_cutoff/48,1,(1/48)),labels = seq(x_cutoff,48), limits = c(x_cutoff/48,1)) +
scale_y_continuous(expand = c(0,0)) +
mapply(function(a,b) {
stat_function(fun = dbeta, args = list(a,b),colour="black",alpha = 0.3)
},
a=sample[[par_name$a]],b=sample[[par_name$b]]) +
xlab("") +
ylab("Density") +
ggtitle(paste0(x_var_names[plot_name_idx], "\n", "N_subj = ", N_subj$n_subj[plot_name_idx])) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.text.x = element_text(angle = 315, vjust = -0.5),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5))
}
}
p <- grid.arrange(grobs = p_list, nrow=2, bottom = "Number of Correct Responses over Blocks 7-9")
ggsave("test accuracy distribution.png", p, path = "figure", width = 10, height = 10)
## Contrast the posteriors
# GEE vs. GEA
png("figure/mode_GEEvsGEA_HDI.png")
plotPost(mcmcMat[,'omega[3]']-mcmcMat[,'omega[1]'])
dev.off()
png("figure/conc_GEEvsGEA_HDI.png")
plotPost(mcmcMat[,'kappa[3]']-mcmcMat[,'kappa[1]'])
dev.off()
# GEE vs. CE
png("figure/mode_GEEvsCE_HDI.png")
plotPost(mcmcMat[,'omega[2]']-mcmcMat[,'omega[1]'])
dev.off()
png("figure/conc_GEEvsCE_HDI.png")
plotPost(mcmcMat[,'kappa[2]']-mcmcMat[,'kappa[1]'])
dev.off()
# CE vs. CEA
png("figure/mode_CEvsCEA_HDI.png")
plotPost(mcmcMat[,'omega[4]']-mcmcMat[,'omega[2]'])
dev.off()
png("figure/conc_CEvsCEA_HDI.png")
plotPost(mcmcMat[,'kappa[4]']-mcmcMat[,'kappa[2]'])
dev.off()
df <- readRDS("../prolific data.RDS")
View(df)
View(df)
df <- readRDS("../prolific data.RDS") %>%
filter(phase == "test", block %in% 7:9) %>%
mutate(`G vs. C` = if_else(grepl("TC",cond),"G","C"),
`E/N vs. A` = if_else(grepl("N",cond),"E/N","A"),
`G vs. C` = factor(`G vs. C`,levels = c("G","C")),
`E/N vs. A` = factor(`E/N vs. A`,levels = c("E/N","A"))
)%>%
group_by(`G vs. C`,`E/N vs. A`,subj, cat) %>%
summarize(N_trials = n(),
N_corr = sum(corr == 1),
Pr_corr = N_corr/N_trials) %>%
# group_by(`G vs. C`,`E/N vs. A`) %>%
# filter(percent_rank(Pr_corr) > .15) %>%
# filter(Pr_corr > quantile(Pr_corr, 0.25, type = 4) - 1.5*IQR(Pr_corr, type = 4)) %>%
ungroup()
library(tidyverse)
library(gamlss)
library(runjags)
library(gridExtra)
df <- readRDS("../prolific data.RDS") %>%
filter(phase == "test", block %in% 7:9) %>%
mutate(`G vs. C` = if_else(grepl("TC",cond),"G","C"),
`E/N vs. A` = if_else(grepl("N",cond),"E/N","A"),
`G vs. C` = factor(`G vs. C`,levels = c("G","C")),
`E/N vs. A` = factor(`E/N vs. A`,levels = c("E/N","A"))
)%>%
group_by(`G vs. C`,`E/N vs. A`,subj, cat) %>%
summarize(N_trials = n(),
N_corr = sum(corr == 1),
Pr_corr = N_corr/N_trials) %>%
# group_by(`G vs. C`,`E/N vs. A`) %>%
# filter(percent_rank(Pr_corr) > .15) %>%
# filter(Pr_corr > quantile(Pr_corr, 0.25, type = 4) - 1.5*IQR(Pr_corr, type = 4)) %>%
ungroup()
View(df)
source("https://osf.io/uahfc/download")
y <- as.integer(df$N_corr)
n <- as.integer(df$N_trials)
x1 <- as.integer(df$`E/N vs. A`) # 1 is E/N; 2 is A
x2 <- as.integer(df$`G vs. C`) # 1 is G; 2 is C
idx <- (x1-1)*2 + x2 # 1 GEE, 2 CE, 3 GEA, 4 CEA
Ntotal <- nrow(df)
Ncond <- n_distinct(idx)
Ncat <- 8
library(tidyverse)
library(jsonlite)
MDS_df = read.csv("rocksmds_cleaned.csv")
setwd("C:/Users/super/Desktop/lab/LearnStrategy/data analysis_expt2/bayesian statistical tests")
MDS_df = read.csv("rocksmds_cleaned.csv")
setwd("C:/Users/super/Desktop/lab/LearnStrategy/experiment folder/expt 3/prior confusability")
MDS_df = read.csv("rocksmds_cleaned.csv")
num_cats = n_distinct(MDS_df$cat)
cat_names = unique(MDS_df$cat)
dist_cat = vector("numeric",num_cats^2)
sim_cat = vector("numeric",num_cats^2)
ref_cat = vector("character",num_cats^2)
pair_cat = vector("character",num_cats^2)
df_idx = 0
for (i in 1:num_cats){
for (j in 1:num_cats){
ref_cat_name = cat_names[i]
paired_cat_name = cat_names[j]
token_idx_ref_cat = with(MDS_df,unique(token[cat == ref_cat_name]))
token_idx_pair_cat = with(MDS_df,unique(token[cat == paired_cat_name]))
cat_pair_df = filter(MDS_df,cat %in% c(ref_cat_name,paired_cat_name))
dist_token = matrix(NA, nrow = length(token_idx_ref_cat), ncol = length(token_idx_pair_cat))
sim_token = matrix(NA, nrow = length(token_idx_ref_cat), ncol = length(token_idx_pair_cat))
for (m in 1:length(token_idx_ref_cat)){
for (n in 1:length(token_idx_pair_cat)){
token_idx_ref = token_idx_ref_cat[m]
token_idx_pair = token_idx_pair_cat[n]
ref_token_coord = filter(cat_pair_df,cat == ref_cat_name,token == token_idx_ref) %>% pull()
pair_token_coord = filter(cat_pair_df,cat == paired_cat_name,token == token_idx_pair) %>% pull()
dist_token[m,n] = sqrt(sum((ref_token_coord - pair_token_coord)^2))
sim_token[m,n] = exp(-1*dist_token[m,n])
}
}
df_idx = df_idx + 1
dist_cat[df_idx] = sum(dist_token)/length(dist_token)
sim_cat[df_idx] = sum(sim_token)/length(sim_token)
ref_cat[df_idx] = ref_cat_name
pair_cat[df_idx] = paired_cat_name
}
}
output_df <-  data.frame(ref = ref_cat, pair = pair_cat,
distance = dist_cat, similarity = sim_cat)
confusion_prior <- output_df %>%
filter(ref == pair) %>%
group_by(ref) %>%
mean(similarity)
confusion_prior <- output_df %>%
filter(ref == pair) %>%
group_by(ref) %>%
summarize(sim = mean(similarity))
View(confusion_prior)
confusion_prior <- output_df %>%
filter(ref == pair) %>%
nest_by(ref)
View(confusion_prior)
View(confusion_prior[[2]][[1]])
View(confusion_prior[[2]][[1]])
View(confusion_prior[[2]][[2]])
View(confusion_prior[[2]][[3]])
confusion_prior <- output_df %>%
filter(ref == pair) %>%
group_by(ref) %>%
summarize(similarity = list(similarity))
View(confusion_prior)
confusion_prior <- output_df %>%
filter(ref == 1)
confusion_prior <- output_df %>%
filter(ref == 1)
output_df %>%
filter(ref == 1)
confusion_prior <- output_df %>%
filter(ref == "Andesite")
View(confusion_prior)
confusion_prior <- output_df %>%
filter(ref == "Andesite") %>%
pull(ref)
confusion_prior <- output_df %>%
filter(ref == "Andesite") %>%
pull(similarity)
confusion_prior <- output_df %>%
filter(ref == "Andesite") %>%
pull(similarity)
confusion_prior
confusion_prior <- output_df %>%
filter(ref == "Basalt") %>%
pull(similarity)
confusion_prior
confusion_prior <- output_df %>%
filter(ref == "Diorite") %>%
pull(similarity)
confusion_prior
confusion_prior <- output_df %>%
filter(ref == "Gabbro") %>%
pull(similarity)
confusion_prior
confusion_prior <- output_df %>%
filter(ref == "Obsidian") %>%
pull(similarity)
confusion_prior
confusion_prior <- output_df %>%
filter(ref == "Pegmatite") %>%
pull(similarity)
confusion_prior
confusion_prior <- output_df %>%
filter(ref == "Peridotite") %>%
pull(similarity)
confusion_prior
confusion_prior <- output_df %>%
filter(ref == "Pumice") %>%
pull(similarity)
confusion_prior
library(tidyverse)
library(jsonlite)
MDS_df = read.csv("rocksmds_cleaned.csv")
num_cats = n_distinct(MDS_df$cat)
cat_names = unique(MDS_df$cat)
dist_cat = vector("numeric",num_cats^2)
sim_cat = vector("numeric",num_cats^2)
ref_cat = vector("character",num_cats^2)
pair_cat = vector("character",num_cats^2)
df_idx = 0
for (i in 1:num_cats){
for (j in 1:num_cats){
ref_cat_name = cat_names[i]
paired_cat_name = cat_names[j]
token_idx_ref_cat = with(MDS_df,unique(token[cat == ref_cat_name]))
token_idx_pair_cat = with(MDS_df,unique(token[cat == paired_cat_name]))
cat_pair_df = filter(MDS_df,cat %in% c(ref_cat_name,paired_cat_name))
dist_token = matrix(NA, nrow = length(token_idx_ref_cat), ncol = length(token_idx_pair_cat))
sim_token = matrix(NA, nrow = length(token_idx_ref_cat), ncol = length(token_idx_pair_cat))
for (m in 1:length(token_idx_ref_cat)){
for (n in 1:length(token_idx_pair_cat)){
token_idx_ref = token_idx_ref_cat[m]
token_idx_pair = token_idx_pair_cat[n]
ref_token_coord = filter(cat_pair_df,cat == ref_cat_name,token == token_idx_ref) %>% pull()
pair_token_coord = filter(cat_pair_df,cat == paired_cat_name,token == token_idx_pair) %>% pull()
dist_token[m,n] = sqrt(sum((ref_token_coord - pair_token_coord)^2))
sim_token[m,n] = exp(-0.5*dist_token[m,n])
}
}
df_idx = df_idx + 1
dist_cat[df_idx] = sum(dist_token)/length(dist_token)
sim_cat[df_idx] = sum(sim_token)/length(sim_token)
ref_cat[df_idx] = ref_cat_name
pair_cat[df_idx] = paired_cat_name
}
}
output_df <-  data.frame(ref = ref_cat, pair = pair_cat,
distance = dist_cat, similarity = sim_cat)
View(output_df)
